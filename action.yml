name: Build marketplace images
description: |
  Building disk images for
    1. DigitalOcean
    2. AWS (AMI)
    .. and more

inputs:
  tag:
    description: |
      Rocket.Chat version tag
    required: true
  digitalocean-token:
    required: false
    description: DigitalOcean token
  aws-key-id:
    required: false
    description: AWS key id
  aws-secret-key:
    required: false
    description: AWS secret key
  source:
    description: Packer source
    required: true

runs:
  using: composite
  steps:
    - name: Check if we should run this action or not
      shell: bash
      run: |
        passed_tag=${{ inputs.tag }}
        echo "passed_tag: $passed_tag"
        current_released=$(
            git -c 'versionsort.suffix=-' ls-remote -t --exit-code --refs --sort=-v:refname "https://github.com/RocketChat/rocketchat-packer" '*' |
            awk -F/ '{ print $NF; exit }'
        )
        echo "current_released: $current_released"
        is_gt() {
          local v1=(${1//./ })
          local v2=(${2//./ })
          (( ${v1[0]} > ${v2[0]} )) && return 0
          (( ${v1[1]} > ${v2[1]} )) && return 0
          (( ${v1[2]} > ${v2[2]} )) && return 0
          return 1
        }
        is_gt $passed_tag $current_released

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        repository: RocketChat/rocketchat-packer

    - name: Validate template
      uses: hashicorp/packer-github-actions@master
      with:
        command: validate
        arguments: -syntax-only
        target: rocketchat.pkr.hcl

    - name: Initialize plugins
      uses: hashicorp/packer-github-actions@master
      with:
        command: init
        target: rocketchat.pkr.hcl

    - name: Build images
      uses: hashicorp/packer-github-actions@master
      with:
        command: build
        arguments: ${{ format('-color=false -on-error=abort -only={0}', inputs.source) }}
        target: rocketchat.pkr.hcl
      env:
        PACKER_LOG: '1'
        PKR_VAR_rocketchat_version: ${{ inputs.tag }}
        PKR_VAR_do_token: ${{ inputs.digitalocean-token }}
        PKR_VAR_aws_key_id: ${{ inputs.aws-key-id }}
        PKR_VAR_aws_secret_key: ${{ inputs.aws-secret-key }}

    - name: Clone test repository
      uses: actions/checkout@v3
      with:
        repository: debdutdeb/rocket.chat.tests
        submodules: true
        path: tests

    - name: Test digitalocean image
      shell: bash
      if: ${{ contains(inputs.source, 'digitalocean') }}
      run: |
        wget https://github.com/digitalocean/doctl/releases/download/v1.84.0/doctl-1.84.0-linux-amd64.tar.gz && 
          tar xf doctl-1.84.0-linux-amd64.tar.gz &&
          sudo mv doctl /usr/local/bin
        sudo apt install jq jo -y
        doctl auth init --access-token ${{ inputs.digitalocean-token }}
        image_id=$(doctl compute snapshot ls --format ID --no-header "rocket-chat-${{ inputs.tag }}-*")
        rocketchat_host_public_ip=$(doctl compute droplet create --image "$image_id" --size s-2vcpu-4gb --region blr1 --format PublicIPv4 --no-header --wait bats-${{ inputs.tag }})
        [[ -n "$rocketchat_host_public_ip" ]]
        export ROCKETCHAT_HOST="http://${rocketchat_host_public_ip}:3000"
        export ROCKETCHAT_TAG=${{ inputs.tag }}
        cd tests && . _.bash && bats api_basic/
        yes | doctl compute droplet delete bats-${{ inputs.tag }}

    - name: Test aws ami
      shell: bash
      if: ${{ contains(inputs.source, 'aws') }}
      env:
        AWS_DEFAULT_REGION: us-east-1
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-key }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-key-id }}
      run: |
        sudo apt install jq jo -y
        ami_id=$(aws ec2 describe-images --region us-east-1 --filters "Name=creation-date,Values="$(date '+%Y-%m-%d')"*" --filters ${{ format('Name=name,Values=rocket-chat-{0}*', inputs.tag) }} --output text --query 'Images[0].ImageId')
        group_id=$(aws ec2 create-security-group --description "rocket.chat ${{ inputs.tag }}" --group-name bats-${{ inputs.tag }} --query GroupId --output text)
        aws ec2 authorize-security-group-ingress --group-id $group_id --protocol tcp --port '0-65535' --cidr '0.0.0.0/0'
        instance_id=$(aws ec2 run-instances --count 1 --image-id $ami_id --instance-type t2.medium --security-group-ids $group_id --query 'Instances[0].InstanceId' --output text)
        aws ec2 wait instance-running --instance-id $instance_id
        rocketchat_host_public_ip=$(aws ec2 describe-instances --instance-id $instance_id --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
        [[ -n "$rocketchat_host_public_ip" ]]
        export ROCKETCHAT_TAG="${{ inputs.tag }}"
        export ROCKETCHAT_HOST="http://${rocketchat_host_public_ip}:3000"
        cd tests && . _.bash && bats api_basic/
        aws ec2 terminate-instances --instance-ids "$instance_id"
        aws ec2 wait instance-terminated --instance-id $instance_id
        aws ec2 delete-security-group --group-id $group_id
